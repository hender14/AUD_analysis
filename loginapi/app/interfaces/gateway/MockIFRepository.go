// Code generated by MockGen. DO NOT EDIT.
// Source: app/interfaces/gateway/IFRepository.go

// Package mock_gateway is a generated GoMock package.
package gateway

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/hender14/app/domain"
	rest "github.com/sendgrid/rest"
)

// MockCRUD is a mock of CRUD interface.
type MockCRUD struct {
	ctrl     *gomock.Controller
	recorder *MockCRUDMockRecorder
}

// MockCRUDMockRecorder is the mock recorder for MockCRUD.
type MockCRUDMockRecorder struct {
	mock *MockCRUD
}

// NewMockCRUD creates a new mock instance.
func NewMockCRUD(ctrl *gomock.Controller) *MockCRUD {
	mock := &MockCRUD{ctrl: ctrl}
	mock.recorder = &MockCRUDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCRUD) EXPECT() *MockCRUDMockRecorder {
	return m.recorder
}

// Awscreate mocks base method.
func (m *MockCRUD) Awscreate(arg0 *domain.SignUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Awscreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Awscreate indicates an expected call of Awscreate.
func (mr *MockCRUDMockRecorder) Awscreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Awscreate", reflect.TypeOf((*MockCRUD)(nil).Awscreate), arg0)
}

// Awscreate_rst mocks base method.
func (m *MockCRUD) Awscreate_rst(arg0 *domain.ForgotUser) (*domain.ForgotUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Awscreate_rst", arg0)
	ret0, _ := ret[0].(*domain.ForgotUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Awscreate_rst indicates an expected call of Awscreate_rst.
func (mr *MockCRUDMockRecorder) Awscreate_rst(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Awscreate_rst", reflect.TypeOf((*MockCRUD)(nil).Awscreate_rst), arg0)
}

// Awsdelete mocks base method.
func (m *MockCRUD) Awsdelete(arg0 *domain.SignUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Awsdelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Awsdelete indicates an expected call of Awsdelete.
func (mr *MockCRUDMockRecorder) Awsdelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Awsdelete", reflect.TypeOf((*MockCRUD)(nil).Awsdelete), arg0)
}

// Awsdelete_rst mocks base method.
func (m *MockCRUD) Awsdelete_rst(arg0 *domain.ForgotUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Awsdelete_rst", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Awsdelete_rst indicates an expected call of Awsdelete_rst.
func (mr *MockCRUDMockRecorder) Awsdelete_rst(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Awsdelete_rst", reflect.TypeOf((*MockCRUD)(nil).Awsdelete_rst), arg0)
}

// Awsquery mocks base method.
func (m *MockCRUD) Awsquery(arg0 *Fsqparam) ([]domain.SignUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Awsquery", arg0)
	ret0, _ := ret[0].([]domain.SignUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Awsquery indicates an expected call of Awsquery.
func (mr *MockCRUDMockRecorder) Awsquery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Awsquery", reflect.TypeOf((*MockCRUD)(nil).Awsquery), arg0)
}

// Awsquery_rst mocks base method.
func (m *MockCRUD) Awsquery_rst(arg0 *Fsqparam) ([]domain.ForgotUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Awsquery_rst", arg0)
	ret0, _ := ret[0].([]domain.ForgotUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Awsquery_rst indicates an expected call of Awsquery_rst.
func (mr *MockCRUDMockRecorder) Awsquery_rst(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Awsquery_rst", reflect.TypeOf((*MockCRUD)(nil).Awsquery_rst), arg0)
}

// Awsread mocks base method.
func (m *MockCRUD) Awsread(arg0 string) (*domain.SignUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Awsread", arg0)
	ret0, _ := ret[0].(*domain.SignUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Awsread indicates an expected call of Awsread.
func (mr *MockCRUDMockRecorder) Awsread(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Awsread", reflect.TypeOf((*MockCRUD)(nil).Awsread), arg0)
}

// Awsupdate mocks base method.
func (m *MockCRUD) Awsupdate(arg0 *domain.SignUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Awsupdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Awsupdate indicates an expected call of Awsupdate.
func (mr *MockCRUDMockRecorder) Awsupdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Awsupdate", reflect.TypeOf((*MockCRUD)(nil).Awsupdate), arg0)
}

// MockMAIL is a mock of MAIL interface.
type MockMAIL struct {
	ctrl     *gomock.Controller
	recorder *MockMAILMockRecorder
}

// MockMAILMockRecorder is the mock recorder for MockMAIL.
type MockMAILMockRecorder struct {
	mock *MockMAIL
}

// NewMockMAIL creates a new mock instance.
func NewMockMAIL(ctrl *gomock.Controller) *MockMAIL {
	mock := &MockMAIL{ctrl: ctrl}
	mock.recorder = &MockMAILMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMAIL) EXPECT() *MockMAILMockRecorder {
	return m.recorder
}

// Reqconf mocks base method.
func (m *MockMAIL) Reqconf(arg0 []byte) (*rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reqconf", arg0)
	ret0, _ := ret[0].(*rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reqconf indicates an expected call of Reqconf.
func (mr *MockMAILMockRecorder) Reqconf(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reqconf", reflect.TypeOf((*MockMAIL)(nil).Reqconf), arg0)
}
