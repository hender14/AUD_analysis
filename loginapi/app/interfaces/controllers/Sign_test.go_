package controllers

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/hender14/app/domain"
	"github.com/hender14/app/interfaces/gateway"
	"github.com/hender14/app/usecase/interactor"
	"github.com/hender14/app/usecase/port"

	"github.com/golang/mock/gomock"
)

// type ApiClientMock struct {}

// func	(a *ApiClientMock)QueryEmail(input *domain.InUser) (error) {
// 	return nil
// }

// type DataRegister struct {
// 	User *UsersController // インターフェイスに依存しているだけで実装は存在しない
// }

func TestSign(t *testing.T) {
	var r gomock.TestReporter
	var check *domain.SignUser
	input := &domain.InUser{FirstName: "test", LastName: "test", Email: "test@gmail.com", Password: "test", Password_confirm: "test"}
	// sinput := &domain.SignUser{FirstName: "test", LastName: "test", Email: "test@gmail.com"}
	// mockのコントローラを作成します
	ctrl := gomock.NewController(r)
	// ctrl := gomock.NewController(NewConcurrentTestReporter(t))
	defer ctrl.Finish()

	// ApiClientインターフェイスのmockを作成します
	mockApiClinet := port.NewMockUserInputPort(ctrl)
	// mockApiClinet := mock_port.NewMockUserRepository(ctrl)
	// 作成したmockに対して期待する呼び出しと返り値を定義します
	// EXPECT()では呼び出されたかどうか
	// Request()ではそのメソッド名が指定した引数で呼び出されたかどうか
	// Return()では返り値を指定します
	mockApiClinet.EXPECT().Sign(input).Return(nil).Times(1)
	// mockApiClinet.EXPECT().RegisterAccoount(gomock.Any()).Do(func(s *domain.SignUser) {
		// Do を使ってモック関数への引数を得ることができる。
		// Do に渡す引数は`actUser`を持つクロージャ関数となる。
	// 	check = s
	// }).Return(nil).Times(1)
	// mockApiClinet.EXPECT().RegisterAccoount(gomock.Any()).Return(nil).Times(1)

	// d := &UsersController{}
	d := UsersController{
		InputFactory: interactor.NewUserInputPort,
		RepoFactory:  gateway.NewUserRepository,
		// Conn:         r.Fsc,
	}
	// d.User = &ApiClientMock{} // mockを登録
	d.InputFactory = mockApiClinet // mockを登録
	expected := input

	router := gin.Default()
	// input := Tsignuser{os.Getenv("TESTUSER_FIRSTNAME"), os.Getenv("TESTUSER_LASTNAME"), os.Getenv("TESTUSER_EMAIL"), os.Getenv("TESTUSER_PASSWORD"), os.Getenv("TESTUSER_PASSWORD_CONFIRM")}
	input_json, _ := json.Marshal(input)
	body := strings.NewReader(string(input_json))

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("POST", "/register", body)
	router.ServeHTTP(w, req)

	assert.Equal(t, 200, w.Code)
	assert.NotEqual(t, nil, w.Body.String())

	// res, err := d.Sign(input)
	// res, err := d.Sign()
	// if err != nil {
	// 	t.Fatal("Register error!", err)
	// }
	// if res.FirstName != expected.FirstName || res.LastName != expected.LastName || res.Email != expected.Email {
	// 	t.Fatal("Value does not match.")
	// }
	// if len(check.Password) != 60 {
	// 	t.Fatal("Value does not match.")
	// }
}

// func testSetting() *gin.Engine{
// 	fs, err := infrastructure.NewDB()
// 	if err != nil {
// 		log.Fatalf("Listen and serve failed. %s\n", err)
// 	}
// 	r := infrastructure.NewRouting(fs)
// 	return r.Gin
// }

func TestSign(t *testing.T) {
	// router := testSetting()
	input := Tsignuser{os.Getenv("TESTUSER_FIRSTNAME"), os.Getenv("TESTUSER_LASTNAME"), os.Getenv("TESTUSER_EMAIL"), os.Getenv("TESTUSER_PASSWORD"), os.Getenv("TESTUSER_PASSWORD_CONFIRM")}
	input_json, _ := json.Marshal(input)
	body := strings.NewReader(string(input_json))

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("POST", "/register", body)
	router.ServeHTTP(w, req)

	assert.Equal(t, 200, w.Code)
	assert.NotEqual(t, nil, w.Body.String())
	// println(w.Body.String())
}