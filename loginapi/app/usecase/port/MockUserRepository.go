// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/port/UserRepository.go

// Package mock_port is a generated GoMock package.
package port

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/hender14/app/domain"
	rest "github.com/sendgrid/rest"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// DeleteAccoount mocks base method.
func (m *MockUserRepository) DeleteAccoount(arg0 *domain.ForgotUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccoount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccoount indicates an expected call of DeleteAccoount.
func (mr *MockUserRepositoryMockRecorder) DeleteAccoount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccoount", reflect.TypeOf((*MockUserRepository)(nil).DeleteAccoount), arg0)
}

// DeleteAccount mocks base method.
func (m *MockUserRepository) DeleteAccount(arg0 *domain.SignUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockUserRepositoryMockRecorder) DeleteAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockUserRepository)(nil).DeleteAccount), arg0)
}

// QueryEmail mocks base method.
func (m *MockUserRepository) QueryEmail(arg0 string) (*domain.SignUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEmail", arg0)
	ret0, _ := ret[0].(*domain.SignUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEmail indicates an expected call of QueryEmail.
func (mr *MockUserRepositoryMockRecorder) QueryEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEmail", reflect.TypeOf((*MockUserRepository)(nil).QueryEmail), arg0)
}

// QueryEmail_none mocks base method.
func (m *MockUserRepository) QueryEmail_none(arg0 string) (*domain.SignUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEmail_none", arg0)
	ret0, _ := ret[0].(*domain.SignUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEmail_none indicates an expected call of QueryEmail_none.
func (mr *MockUserRepositoryMockRecorder) QueryEmail_none(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEmail_none", reflect.TypeOf((*MockUserRepository)(nil).QueryEmail_none), arg0)
}

// QueryToken mocks base method.
func (m *MockUserRepository) QueryToken(arg0 string) (*domain.ForgotUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryToken", arg0)
	ret0, _ := ret[0].(*domain.ForgotUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryToken indicates an expected call of QueryToken.
func (mr *MockUserRepositoryMockRecorder) QueryToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryToken", reflect.TypeOf((*MockUserRepository)(nil).QueryToken), arg0)
}

// ReadID mocks base method.
func (m *MockUserRepository) ReadID(arg0 string) (*domain.SignUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadID", arg0)
	ret0, _ := ret[0].(*domain.SignUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadID indicates an expected call of ReadID.
func (mr *MockUserRepositoryMockRecorder) ReadID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadID", reflect.TypeOf((*MockUserRepository)(nil).ReadID), arg0)
}

// RegisterAccoount mocks base method.
func (m *MockUserRepository) RegisterAccoount(arg0 *domain.SignUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAccoount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAccoount indicates an expected call of RegisterAccoount.
func (mr *MockUserRepositoryMockRecorder) RegisterAccoount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccoount", reflect.TypeOf((*MockUserRepository)(nil).RegisterAccoount), arg0)
}

// ResetAccount mocks base method.
func (m *MockUserRepository) ResetAccount(arg0, arg1 string) (*domain.ForgotUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAccount", arg0, arg1)
	ret0, _ := ret[0].(*domain.ForgotUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetAccount indicates an expected call of ResetAccount.
func (mr *MockUserRepositoryMockRecorder) ResetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAccount", reflect.TypeOf((*MockUserRepository)(nil).ResetAccount), arg0, arg1)
}

// Sendmail mocks base method.
func (m *MockUserRepository) Sendmail(config *domain.Mails, param *domain.RstmailPara) (*rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sendmail", config, param)
	ret0, _ := ret[0].(*rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sendmail indicates an expected call of Sendmail.
func (mr *MockUserRepositoryMockRecorder) Sendmail(config, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sendmail", reflect.TypeOf((*MockUserRepository)(nil).Sendmail), config, param)
}

// Sendmail_Cnt mocks base method.
func (m *MockUserRepository) Sendmail_Cnt(config *domain.Mails, param *domain.CntmailPara) (*rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sendmail_Cnt", config, param)
	ret0, _ := ret[0].(*rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sendmail_Cnt indicates an expected call of Sendmail_Cnt.
func (mr *MockUserRepositoryMockRecorder) Sendmail_Cnt(config, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sendmail_Cnt", reflect.TypeOf((*MockUserRepository)(nil).Sendmail_Cnt), config, param)
}

// UpdateAccoount mocks base method.
func (m *MockUserRepository) UpdateAccoount(arg0 *domain.SignUser, arg1 string) (*domain.SignUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccoount", arg0, arg1)
	ret0, _ := ret[0].(*domain.SignUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccoount indicates an expected call of UpdateAccoount.
func (mr *MockUserRepositoryMockRecorder) UpdateAccoount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccoount", reflect.TypeOf((*MockUserRepository)(nil).UpdateAccoount), arg0, arg1)
}

// MockUserInputPort is a mock of UserInputPort interface.
type MockUserInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserInputPortMockRecorder
}

// MockUserInputPortMockRecorder is the mock recorder for MockUserInputPort.
type MockUserInputPortMockRecorder struct {
	mock *MockUserInputPort
}

// NewMockUserInputPort creates a new mock instance.
func NewMockUserInputPort(ctrl *gomock.Controller) *MockUserInputPort {
	mock := &MockUserInputPort{ctrl: ctrl}
	mock.recorder = &MockUserInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInputPort) EXPECT() *MockUserInputPortMockRecorder {
	return m.recorder
}

// Contact mocks base method.
func (m *MockUserInputPort) Contact(arg0 *gin.Context, arg1 *domain.CntmailPara) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Contact", arg0, arg1)
}

// Contact indicates an expected call of Contact.
func (mr *MockUserInputPortMockRecorder) Contact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contact", reflect.TypeOf((*MockUserInputPort)(nil).Contact), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUserInputPort) Delete(arg0 *gin.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0, arg1)
}

// Delete indicates an expected call of Delete.
func (mr *MockUserInputPortMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserInputPort)(nil).Delete), arg0, arg1)
}

// Forgot mocks base method.
func (m *MockUserInputPort) Forgot(arg0 *gin.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Forgot", arg0, arg1)
}

// Forgot indicates an expected call of Forgot.
func (mr *MockUserInputPortMockRecorder) Forgot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forgot", reflect.TypeOf((*MockUserInputPort)(nil).Forgot), arg0, arg1)
}

// Login mocks base method.
func (m *MockUserInputPort) Login(arg0 *gin.Context, arg1 *domain.LoginUser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", arg0, arg1)
}

// Login indicates an expected call of Login.
func (mr *MockUserInputPortMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserInputPort)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *MockUserInputPort) Logout(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", arg0)
}

// Logout indicates an expected call of Logout.
func (mr *MockUserInputPortMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserInputPort)(nil).Logout), arg0)
}

// Reset mocks base method.
func (m *MockUserInputPort) Reset(arg0 *gin.Context, arg1 *domain.ResetUser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", arg0, arg1)
}

// Reset indicates an expected call of Reset.
func (mr *MockUserInputPortMockRecorder) Reset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockUserInputPort)(nil).Reset), arg0, arg1)
}

// Sign mocks base method.
func (m *MockUserInputPort) Sign(arg0 *domain.InUser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sign", arg0)
}

// Sign indicates an expected call of Sign.
func (mr *MockUserInputPortMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockUserInputPort)(nil).Sign), arg0)
}

// User mocks base method.
func (m *MockUserInputPort) User(arg0 *gin.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "User", arg0, arg1)
}

// User indicates an expected call of User.
func (mr *MockUserInputPortMockRecorder) User(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserInputPort)(nil).User), arg0, arg1)
}

// MockUserOutputPort is a mock of UserOutputPort interface.
type MockUserOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserOutputPortMockRecorder
}

// MockUserOutputPortMockRecorder is the mock recorder for MockUserOutputPort.
type MockUserOutputPortMockRecorder struct {
	mock *MockUserOutputPort
}

// NewMockUserOutputPort creates a new mock instance.
func NewMockUserOutputPort(ctrl *gomock.Controller) *MockUserOutputPort {
	mock := &MockUserOutputPort{ctrl: ctrl}
	mock.recorder = &MockUserOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserOutputPort) EXPECT() *MockUserOutputPortMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MockUserOutputPort) Render(arg0 interface{}, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render", arg0, arg1)
}

// Render indicates an expected call of Render.
func (mr *MockUserOutputPortMockRecorder) Render(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockUserOutputPort)(nil).Render), arg0, arg1)
}

// RenderError mocks base method.
func (m *MockUserOutputPort) RenderError(arg0 interface{}, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderError", arg0, arg1)
}

// RenderError indicates an expected call of RenderError.
func (mr *MockUserOutputPortMockRecorder) RenderError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderError", reflect.TypeOf((*MockUserOutputPort)(nil).RenderError), arg0, arg1)
}
